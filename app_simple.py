import requests
import pandas as pd
import plotly.express as px
import streamlit as st
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import IsolationForest
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')

# =====================================================
# CONFIGURACI√ìN DE LA APLICACI√ìN
# =====================================================

st.set_page_config(
    page_title="An√°lisis de Compras P√∫blicas",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =====================================================
# CONSTANTES
# =====================================================

PROVINCIAS_ECUADOR = [
    "AZUAY", "BOL√çVAR", "CA√ëAR", "CARCHI", "CHIMBORAZO", "COTOPAXI", 
    "EL ORO", "ESMERALDAS", "GAL√ÅPAGOS", "GUAYAS", "IMBABURA", "LOJA", 
    "LOS R√çOS", "MANAB√ç", "MORONA-SANTIAGO", "NAPO", "ORELLANA", 
    "PASTAZA", "PICHINCHA", "SANTA ELENA", "SANTO DOMINGO DE LOS TS√ÅCHILAS", 
    "SUCUMB√çOS", "TUNGURAHUA", "ZAMORA-CHINCHIPE"
]

TIPOS_CONTRATACION = [
    "Licitaci√≥n",
    "Todas",
    "Subasta Inversa Electr√≥nica",
    "Obra art√≠stica, cient√≠fica o literaria",
    "Menor Cuant√≠a",
    "Cotizaci√≥n",
    "Contratos entre Entidades P√∫blicas o sus subsidiarias",
    "Contrataci√≥n directa",
    "Cat√°logo electr√≥nico - Mejor oferta",
    "Cat√°logo electr√≥nico - Compra directa",
    "Bienes y Servicios √∫nicos",
    "Asesor√≠a y Patrocinio Jur√≠dico",
    "Repuestos o Accesorios",
    "Lista corta",
    "Comunicaci√≥n Social ‚Äì Contrataci√≥n Directa",
    "Transporte de correo interno o internacional",
    "Licitaci√≥n de Seguros",
    "Comunicaci√≥n Social ‚Äì Proceso de Selecci√≥n",
    "Cat√°logo electr√≥nico - Gran compra puja",
    "Cat√°logo electr√≥nico - Gran compra mejor oferta"
]

TIPOS_GRAFICAS = {
    "üìä Gr√°fica de Barras - Total por Tipo": "bar_chart",
    "üìà Evoluci√≥n Mensual - L√≠neas": "line_chart", 
    "üìä Barras Apiladas - Mensual por Tipo": "stacked_bar_chart",
    "ü•ß Gr√°fica de Pastel - Proporci√≥n Contratos": "pie_chart",
    "üéØ Dispersi√≥n - Total vs Contratos": "scatter_chart",
    "üìà Comparativa L√≠neas - Tipos por A√±o": "comparative_line_chart"
}

# =====================================================
# FUNCIONES AUXILIARES - API Y PROCESAMIENTO
# =====================================================

def get_combined_data(year, regions, contract_types):
    """
    Obtiene y combina datos de m√∫ltiples provincias y tipos de contrataci√≥n
    
    Args:
        year (int): A√±o para la consulta
        regions (list): Lista de provincias
        contract_types (list): Lista de tipos de contrataci√≥n
        
    Returns:
        pd.DataFrame: DataFrame combinado de todas las consultas
    """
    all_data = []
    successful_queries = []
    failed_queries = []
    
    total_queries = len(regions) * len(contract_types)
    
    # Crear barra de progreso
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    query_count = 0
    
    for region in regions:
        for contract_type in contract_types:
            query_count += 1
            
            # Actualizar progreso
            progress = query_count / total_queries
            progress_bar.progress(progress)
            status_text.text(f"Consultando {region} - {contract_type}... ({query_count}/{total_queries})")
            
            # Construir URL para esta combinaci√≥n
            url = f"https://datosabiertos.compraspublicas.gob.ec/PLATAFORMA/api/get_analysis?year={year}&region={region}&type={contract_type}"
            
            try:
                response = requests.get(url)
                if response.status_code == 200:
                    data = response.json()
                    if data and len(data) > 0:  # Verificar que hay datos
                        # Agregar columnas de identificaci√≥n a los datos
                        df_query = pd.DataFrame(data)
                        df_query['provincia'] = region
                        df_query['tipo_consulta'] = contract_type
                        all_data.append(df_query)
                        successful_queries.append(f"{region} - {contract_type}")
                    else:
                        failed_queries.append(f"{region} - {contract_type} (sin datos)")
                else:
                    failed_queries.append(f"{region} - {contract_type} (error {response.status_code})")
            except Exception as e:
                failed_queries.append(f"{region} - {contract_type} (error conexi√≥n)")
    
    # Limpiar barra de progreso
    progress_bar.empty()
    status_text.empty()
    
    # Mostrar resumen de consultas
    if successful_queries:
        st.success(f"‚úÖ Datos obtenidos de {len(successful_queries)} consulta(s) exitosa(s)")
    
    if failed_queries:
        st.warning(f"‚ö†Ô∏è Sin datos o con errores en {len(failed_queries)} consulta(s)")
    
    # Combinar todos los datos
    if all_data:
        combined_df = pd.concat(all_data, ignore_index=True)
        return combined_df
    else:
        return None

def get_data(url):
    """
    Realiza la consulta a la API de compras p√∫blicas (funci√≥n mantenida para compatibilidad)
    
    Args:
        url (str): URL de la API a consultar
        
    Returns:
        dict: Datos obtenidos de la API o None si hay error
    """
    try:
        response = requests.get(url)
        
        if response.status_code == 200:
            return response.json()
        else:
            return None
            
    except requests.exceptions.RequestException as e:
        return None
    """
    Obtiene y combina datos de m√∫ltiples provincias
    
    Args:
        year (int): A√±o para la consulta
        provinces (list): Lista de provincias
        contract_type (str): Tipo de contrataci√≥n
        
    Returns:
        pd.DataFrame: DataFrame combinado de todas las provincias
    """
    all_data = []
    successful_provinces = []
    failed_provinces = []
    
    # Crear barra de progreso
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i, province in enumerate(provinces):
        # Actualizar progreso
        progress = (i + 1) / len(provinces)
        progress_bar.progress(progress)
        status_text.text(f"Consultando {province}... ({i+1}/{len(provinces)})")
        
        # Construir URL para esta provincia
        url = f"https://datosabiertos.compraspublicas.gob.ec/PLATAFORMA/api/get_analysis?year={year}&region={province}&type={contract_type}"
        
        try:
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if data and len(data) > 0:  # Verificar que hay datos
                    # Agregar columna de provincia a los datos
                    df_province = pd.DataFrame(data)
                    df_province['provincia'] = province
                    all_data.append(df_province)
                    successful_provinces.append(province)
                else:
                    failed_provinces.append(f"{province} (sin datos)")
            else:
                failed_provinces.append(f"{province} (error {response.status_code})")
        except Exception as e:
            failed_provinces.append(f"{province} (error conexi√≥n)")
    
    # Limpiar barra de progreso
    progress_bar.empty()
    status_text.empty()
    
    # Mostrar resumen de consultas
    if successful_provinces:
        st.success(f"‚úÖ Datos obtenidos de {len(successful_provinces)} provincia(s): {', '.join(successful_provinces)}")
    
    if failed_provinces:
        st.warning(f"‚ö†Ô∏è Sin datos o con errores en {len(failed_provinces)} provincia(s): {', '.join(failed_provinces)}")
    
    # Combinar todos los datos
    if all_data:
        combined_df = pd.concat(all_data, ignore_index=True)
        return combined_df
    else:
        return None
    """
    Realiza la consulta a la API de compras p√∫blicas
    
    Args:
        url (str): URL de la API a consultar
        
    Returns:
        dict: Datos obtenidos de la API o None si hay error
    """
    try:
        response = requests.get(url)
        
        # Mostrar informaci√≥n de depuraci√≥n
        with st.expander("üîç Informaci√≥n de Depuraci√≥n"):
            st.code(f"URL: {url}")
            st.code(f"Status Code: {response.status_code}")
            st.code(f"Respuesta completa: {response.text}")
        
        if response.status_code == 200:
            st.success("‚úÖ Consulta exitosa, procesando los datos...")
            try:
                json_data = response.json()
                st.write("üìã Estructura de datos recibidos:")
                st.json(json_data)
                return json_data
            except ValueError as e:
                st.error(f"‚ùå Error al convertir respuesta a JSON: {e}")
                return None
        else:
            st.error(f"‚ùå Error en la consulta, c√≥digo de estado: {response.status_code}")
            return None
            
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå Error en la consulta: {e}")
        return None

def process_data(data):
    """
    Procesa y limpia los datos obtenidos de la API
    
    Args:
        data (dict o DataFrame): Datos crudos de la API o DataFrame ya procesado
        
    Returns:
        pd.DataFrame: DataFrame procesado y limpio
    """
    try:
        # Mostrar informaci√≥n sobre los datos recibidos
        st.write("üîç **Analizando estructura de datos:**")
        st.write(f"Tipo de datos: {type(data)}")
        
        # Si ya es un DataFrame (datos combinados), procesarlo directamente
        if isinstance(data, pd.DataFrame):
            st.success("‚úÖ Datos ya procesados como DataFrame")
            df = data.copy()
            
            st.write(f"üìä DataFrame con {len(df)} filas y {len(df.columns)} columnas")
            st.write("üìã Columnas disponibles:")
            st.write(list(df.columns))
            
            if len(df) > 0:
                st.write("üìÑ Muestra de datos (primeras 3 filas):")
                st.dataframe(df.head(3))
        else:
            # Procesar datos crudos de API (c√≥digo original)
            # Verificar si los datos est√°n vac√≠os
            if isinstance(data, list) and len(data) == 0:
                st.warning("üì≠ **La API devolvi√≥ una lista vac√≠a**")
                st.info("üí° **Posibles causas:**\n"
                       "- No hay registros para esa combinaci√≥n espec√≠fica de filtros\n"
                       "- Los datos pueden no estar disponibles para ese a√±o/provincia/tipo\n"
                       "- Intenta con diferentes par√°metros (otro a√±o, provincia o tipo de contrataci√≥n)")
                return None
            
            if isinstance(data, dict):
                st.write(f"Claves disponibles: {list(data.keys())}")
                # Verificar si el diccionario est√° vac√≠o o tiene datos vac√≠os
                if not data or all(not v for v in data.values()):
                    st.warning("üì≠ **La API devolvi√≥ datos vac√≠os**")
                    st.info("üí° **Posibles causas:**\n"
                           "- No hay registros para esa combinaci√≥n espec√≠fica de filtros\n"
                           "- Los datos pueden no estar disponibles para ese a√±o/provincia/tipo\n"
                           "- Intenta con diferentes par√°metros")
                    return None
                
            # Intentar diferentes formas de convertir a DataFrame
            if isinstance(data, list):
                if len(data) == 0:
                    return None
                df = pd.DataFrame(data)
            elif isinstance(data, dict):
                # Si es un diccionario, puede estar en una clave espec√≠fica
                if 'data' in data:
                    if not data['data'] or len(data['data']) == 0:
                        st.warning("üì≠ **No hay datos en 'data'**")
                        return None
                    df = pd.DataFrame(data['data'])
                elif 'results' in data:
                    if not data['results'] or len(data['results']) == 0:
                        st.warning("üì≠ **No hay datos en 'results'**")
                        return None
                    df = pd.DataFrame(data['results'])
                elif 'records' in data:
                    if not data['records'] or len(data['records']) == 0:
                        st.warning("üì≠ **No hay datos en 'records'**")
                        return None
                    df = pd.DataFrame(data['records'])
                else:
                    # Intentar usar los datos directamente
                    df = pd.DataFrame([data])
            else:
                st.error("‚ùå Formato de datos no reconocido")
                return None
            
            st.success(f"‚úÖ DataFrame creado con {len(df)} filas y {len(df.columns)} columnas")
            st.write("üìã Columnas disponibles:")
            st.write(list(df.columns))
            
            if len(df) > 0:
                st.write("üìÑ Muestra de datos (primeras 3 filas):")
                st.dataframe(df.head(3))
        
        # Verificar columnas necesarias
        required_columns = ['internal_type', 'total', 'month', 'contracts']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.warning(f"‚ö†Ô∏è Columnas faltantes: {missing_columns}")
            st.write("üí° Intentando mapear columnas similares...")
            
            # Mapeo alternativo de nombres de columnas
            column_mapping = {
                'tipo': 'internal_type',
                'type': 'internal_type',
                'tipo_contratacion': 'internal_type',
                'monto': 'total',
                'valor': 'total',
                'amount': 'total',
                'mes': 'month',
                'contratos': 'contracts',
                'num_contratos': 'contracts',
                'cantidad': 'contracts'
            }
            
            for old_name, new_name in column_mapping.items():
                if old_name in df.columns and new_name not in df.columns:
                    df[new_name] = df[old_name]
                    st.success(f"‚úÖ Mapeado: '{old_name}' ‚Üí '{new_name}'")
        
        # Verificar nuevamente despu√©s del mapeo
        still_missing = [col for col in required_columns if col not in df.columns]
        if still_missing:
            st.error(f"‚ùå No se pudieron encontrar las columnas: {still_missing}")
            st.info("üí° Datos disponibles podr√≠an estar en formato diferente")
            return None
        
        # Conversi√≥n de tipos de datos
        df['total'] = pd.to_numeric(df['total'], errors='coerce')
        df['month'] = pd.to_numeric(df['month'], errors='coerce')
        df['contracts'] = pd.to_numeric(df['contracts'], errors='coerce')
        
        # Manejo de valores nulos
        initial_rows = len(df)
        df = df.dropna(subset=['internal_type', 'total'])
        final_rows = len(df)
        
        if initial_rows != final_rows:
            st.info(f"‚ÑπÔ∏è Se eliminaron {initial_rows - final_rows} filas con valores nulos")
        
        if len(df) == 0:
            st.warning("‚ö†Ô∏è No quedan datos v√°lidos despu√©s de la limpieza")
            st.info("üí° **Sugerencias:**\n"
                   "- Prueba con otros filtros (a√±o, provincia, tipo de contrataci√≥n)\n"
                   "- Algunos a√±os/provincias pueden tener pocos registros\n"
                   "- Verifica que la combinaci√≥n de filtros sea v√°lida")
            return None
        
        # Mapear n√∫meros de mes a nombres en espa√±ol
        month_names = {
            1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',
            5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',
            9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'
        }
        
        # Convertir month a num√©rico y luego mapear a nombres
        df['month_name'] = df['month'].map(month_names)
        df['month_order'] = df['month']  # Para ordenar correctamente
        
        st.success(f"‚úÖ Datos procesados correctamente: {len(df)} registros v√°lidos")
        
        return df
        
    except Exception as e:
        st.error(f"‚ùå Error procesando datos: {str(e)}")
        st.error(f"Tipo de error: {type(e).__name__}")
        return None

# =====================================================
# FUNCIONES DE VISUALIZACI√ìN
# =====================================================

def create_bar_chart(df):
    """Crea gr√°fica de barras: Total por Tipo de Contrataci√≥n"""
    df_grouped = df.groupby(['month_name', 'month_order', 'internal_type']).agg({'total': 'sum'}).reset_index()
    df_grouped = df_grouped.sort_values('month_order')  # Ordenar por n√∫mero de mes
    
    fig = px.bar(
        df_grouped, 
        x='month_name', 
        y='total', 
        title='üìä Total por Tipo de Contrataci√≥n', 
        labels={'month_name': 'Mes', 'total': 'Monto Total', 'internal_type': 'Tipo de Contrataci√≥n'},
        color='internal_type',
        text='total',
        color_discrete_sequence=px.colors.qualitative.Set2
    )
    
    fig.update_layout(
        xaxis_title="Mes",
        yaxis_title="Monto Total (USD)",
        showlegend=True,
        height=600
    )
    
    return fig

def create_line_chart(df):
    """Crea gr√°fica de l√≠neas: Evoluci√≥n Mensual de Montos Totales"""
    df_monthly = df.groupby(['month_name', 'month_order']).agg({'total': 'sum'}).reset_index()
    df_monthly = df_monthly.sort_values('month_order')  # Ordenar por n√∫mero de mes
    
    fig = px.line(
        df_monthly, 
        x='month_name', 
        y='total', 
        title='üìà Evoluci√≥n Mensual de Montos Totales',
        labels={'month_name': 'Mes', 'total': 'Monto Total'},
        markers=True,
        line_shape='linear',
        range_y=[0, df_monthly['total'].max() + 5000000],
        template='plotly_white'
    )
    
    fig.update_layout(
        xaxis_title="Mes",
        yaxis_title="Monto Total (USD)",
        height=600
    )
    
    return fig

def create_stacked_bar_chart(df):
    """Crea gr√°fica de barras apiladas: Total por Tipo de Contrataci√≥n por Mes"""
    df_grouped = df.groupby(['month_name', 'month_order', 'internal_type']).agg({'total': 'sum'}).reset_index()
    df_grouped = df_grouped.sort_values('month_order')  # Ordenar por n√∫mero de mes
    
    fig = px.bar(
        df_grouped, 
        x='month_name', 
        y='total', 
        color='internal_type', 
        title='üìä Total por Tipo de Contrataci√≥n por Mes', 
        labels={'month_name': 'Mes', 'total': 'Monto Total'},
        text='total',
        color_discrete_sequence=px.colors.qualitative.Set1,
        barmode='stack',
        template='plotly_white'
    )
    
    fig.update_layout(
        xaxis_title="Mes",
        yaxis_title="Monto Total (USD)",
        height=600
    )
    
    return fig

def create_pie_chart(df):
    """Crea gr√°fica de pastel: Proporci√≥n de Contratos por Tipo de Contrataci√≥n"""
    df_contracts = df.groupby('internal_type').agg({'contracts': 'sum'}).reset_index()
    
    fig = px.pie(
        df_contracts, 
        names='internal_type', 
        values='contracts', 
        title='ü•ß Proporci√≥n de Contratos por Tipo de Contrataci√≥n',
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    
    fig.update_layout(height=600)
    
    return fig

def create_scatter_chart(df):
    """Crea gr√°fica de dispersi√≥n: Total vs. Cantidad de Contratos"""
    fig = px.scatter(
        df, 
        x='contracts', 
        y='total', 
        title='üéØ Total vs. Cantidad de Contratos', 
        labels={'contracts': 'Cantidad de Contratos', 'total': 'Monto Total'},
        color='internal_type',
        trendline='ols',
        color_discrete_sequence=px.colors.qualitative.Set2
    )
    
    fig.update_layout(
        xaxis_title="Cantidad de Contratos",
        yaxis_title="Monto Total (USD)",
        height=600
    )
    
    return fig

def create_comparative_line_chart(df):
    """Crea gr√°fica de l√≠neas comparativa: Tipos de Contrataci√≥n a lo Largo del A√±o"""
    df_comparative = df.groupby(['month_name', 'month_order', 'internal_type']).agg({'total': 'sum'}).reset_index()
    df_comparative = df_comparative.sort_values('month_order')  # Ordenar por n√∫mero de mes
    
    fig = px.line(
        df_comparative, 
        x='month_name', 
        y='total', 
        color='internal_type', 
        title='üìà Comparativa de Tipos de Contrataci√≥n a lo Largo del A√±o',
        labels={'month_name': 'Mes', 'total': 'Monto Total'},
        markers=True,
        color_discrete_sequence=px.colors.qualitative.Set1
    )
    
    fig.update_layout(
        xaxis_title="Mes",
        yaxis_title="Monto Total (USD)",
        height=600
    )
    
    return fig

def get_chart_description(chart_type):
    """Retorna la descripci√≥n de cada tipo de gr√°fica"""
    descriptions = {
        "bar_chart": "**Descripci√≥n:** Muestra el total de montos por cada tipo de contrataci√≥n agrupados por mes. Permite identificar cu√°les son los tipos de contrataci√≥n m√°s utilizados y con mayores montos.",
        
        "line_chart": "**Descripci√≥n:** Representa la evoluci√≥n del monto total de contratos a lo largo de los meses. Ayuda a visualizar tendencias a lo largo del a√±o, como picos en ciertos meses.",
        
        "stacked_bar_chart": "**Descripci√≥n:** Muestra la distribuci√≥n del total de montos por tipo de contrataci√≥n para cada mes usando barras apiladas. Permite ver c√≥mo se distribuyen los diferentes tipos de contrataci√≥n mes a mes.",
        
        "pie_chart": "**Descripci√≥n:** Representa la proporci√≥n de contratos por cada tipo de contrataci√≥n en formato circular. Muestra qu√© tipos de contrataci√≥n son m√°s frecuentes en t√©rminos de cantidad.",
        
        "scatter_chart": "**Descripci√≥n:** Muestra la relaci√≥n entre el total de montos y la cantidad de contratos mediante puntos dispersos. Permite identificar si hay una correlaci√≥n entre el n√∫mero de contratos y el monto total.",
        
        "comparative_line_chart": "**Descripci√≥n:** Compara diferentes tipos de contrataci√≥n a lo largo de los meses usando m√∫ltiples l√≠neas. Permite observar patrones y comportamientos en diferentes tipos de contrataci√≥n a lo largo del tiempo."
    }
    return descriptions.get(chart_type, "")

# =====================================================
# FUNCIONES DE MODELOS DE PREDICCI√ìN
# =====================================================

def apply_clustering(df):
    """Aplica clustering para agrupar provincias/contratos"""
    try:
        # Preparar datos para clustering
        features = df.groupby('internal_type').agg({
            'total': ['sum', 'mean', 'count'],
            'contracts': ['sum', 'mean']
        }).reset_index()
        
        features.columns = ['internal_type', 'total_sum', 'total_mean', 'total_count', 'contracts_sum', 'contracts_mean']
        
        # Verificar si hay suficientes datos
        if len(features) < 3:
            st.warning(f"‚ö†Ô∏è Se necesitan al menos 3 tipos de contrataci√≥n para clustering, pero solo hay {len(features)}")
            st.info("üí° **Sugerencias:**\n- Prueba con un filtro m√°s amplio (ej: 'Todas' en tipo de contrataci√≥n)\n- Selecciona una provincia con m√°s actividad\n- Cambia a un a√±o con m√°s datos")
            return None
        
        # Normalizar datos
        scaler = StandardScaler()
        features_scaled = scaler.fit_transform(features[['total_sum', 'total_mean', 'contracts_sum', 'contracts_mean']])
        
        # Determinar n√∫mero √≥ptimo de clusters (m√°ximo 3, pero puede ser menos)
        n_clusters = min(3, len(features))
        
        # Aplicar KMeans
        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        features['cluster'] = kmeans.fit_predict(features_scaled)
        
        return features
    except Exception as e:
        st.error(f"Error en clustering: {e}")
        return None

def predict_amounts(df):
    """Predice montos usando regresi√≥n simple"""
    try:
        # Preparar datos
        df_pred = df.copy()
        df_pred['month_num'] = df_pred['month_order']
        
        # Agrupar por mes
        monthly_data = df_pred.groupby('month_num').agg({
            'total': 'sum',
            'contracts': 'sum'
        }).reset_index()
        
        if len(monthly_data) < 3:
            st.warning(f"‚ö†Ô∏è Se necesitan al menos 3 meses de datos para predicci√≥n, pero solo hay {len(monthly_data)}")
            st.info("üí° **Sugerencias:**\n- Selecciona un a√±o completo con m√°s meses\n- Prueba con una provincia m√°s grande\n- Usa 'Todas' en tipo de contrataci√≥n para obtener m√°s datos")
            return None
            
        # Predicci√≥n simple usando tendencia lineal
        X = monthly_data['month_num'].values.reshape(-1, 1)
        y = monthly_data['total'].values
        
        # Verificar que hay variaci√≥n en los datos
        if len(set(y)) == 1:
            st.warning("‚ö†Ô∏è Todos los valores son iguales, no se puede calcular tendencia")
            return None
        
        # Calcular tendencia
        trend = np.polyfit(monthly_data['month_num'], monthly_data['total'], 1)
        
        # Predecir pr√≥ximos 3 meses
        next_months = [13, 14, 15]  # Enero, Febrero, Marzo del siguiente a√±o
        predictions = []
        
        for month in next_months:
            pred_value = trend[0] * month + trend[1]
            predictions.append({
                'month': month,
                'predicted_total': max(0, pred_value)  # No valores negativos
            })
        
        return pd.DataFrame(predictions)
    except Exception as e:
        st.error(f"Error en predicci√≥n: {e}")
        return None

def classify_contracts(df):
    """Clasifica contratos por valor (Alto, Medio, Bajo)"""
    try:
        # Verificar que hay suficientes datos
        if len(df) < 3:
            st.warning(f"‚ö†Ô∏è Se necesitan al menos 3 registros para clasificaci√≥n, pero solo hay {len(df)}")
            st.info("üí° **Sugerencias:**\n- Selecciona una provincia con m√°s actividad\n- Usa 'Todas' en tipo de contrataci√≥n\n- Prueba con un a√±o diferente")
            return None
        
        # Crear categor√≠as basadas en percentiles
        df_class = df.copy()
        df_class['total_per_contract'] = df_class['total'] / df_class['contracts']
        
        # Verificar que hay variaci√≥n en los valores
        unique_values = df_class['total_per_contract'].nunique()
        if unique_values < 3:
            st.warning(f"‚ö†Ô∏è Hay muy poca variaci√≥n en los datos ({unique_values} valores √∫nicos)")
            st.info("üí° La clasificaci√≥n funciona mejor con m√°s variedad de montos")
            # Continuar con clasificaci√≥n simple
            if unique_values == 1:
                df_class['classification'] = 'Medio'
                return df_class
        
        # Definir umbrales
        high_threshold = df_class['total_per_contract'].quantile(0.75)
        low_threshold = df_class['total_per_contract'].quantile(0.25)
        
        # Clasificar
        def classify_value(value):
            if value >= high_threshold:
                return 'Alto'
            elif value <= low_threshold:
                return 'Bajo'
            else:
                return 'Medio'
        
        df_class['classification'] = df_class['total_per_contract'].apply(classify_value)
        
        return df_class
    except Exception as e:
        st.error(f"Error en clasificaci√≥n: {e}")
        return None

def apply_pca(df):
    """Aplica PCA para reducci√≥n dimensional"""
    try:
        # Preparar datos
        features = df.groupby('internal_type').agg({
            'total': ['sum', 'mean', 'std'],
            'contracts': ['sum', 'mean', 'std'],
            'month_order': ['min', 'max', 'mean']
        }).reset_index()
        
        # Limpiar nombres de columnas
        features.columns = ['internal_type', 'total_sum', 'total_mean', 'total_std', 
                           'contracts_sum', 'contracts_mean', 'contracts_std',
                           'month_min', 'month_max', 'month_mean']
        
        # Rellenar NaN
        features = features.fillna(0)
        
        # Aplicar PCA
        numeric_features = features.select_dtypes(include=[np.number])
        
        # Verificar dimensiones m√≠nimas
        n_samples, n_features = numeric_features.shape
        
        if n_samples < 2:
            st.warning(f"‚ö†Ô∏è PCA necesita al menos 2 muestras, pero solo hay {n_samples}")
            st.info("üí° **Sugerencias:**\n- Selecciona una provincia con m√°s tipos de contrataci√≥n\n- Usa 'Todas' en tipo de contrataci√≥n\n- Prueba con un filtro m√°s amplio")
            return None, None
        
        if n_features < 2:
            st.warning(f"‚ö†Ô∏è PCA necesita al menos 2 caracter√≠sticas, pero solo hay {n_features}")
            st.info("üí° Los datos no tienen suficiente variabilidad para PCA")
            return None, None
        
        # Determinar n√∫mero de componentes (m√°ximo 2, pero puede ser menos)
        n_components = min(2, n_samples, n_features)
        
        if n_components < 2:
            st.warning(f"‚ö†Ô∏è Solo se puede calcular {n_components} componente principal")
            st.info("üí° Se necesitan m√°s datos para PCA bidimensional")
            return None, None
        
        pca = PCA(n_components=n_components)
        pca_result = pca.fit_transform(numeric_features)
        
        features['pca1'] = pca_result[:, 0]
        if n_components > 1:
            features['pca2'] = pca_result[:, 1]
        else:
            features['pca2'] = 0  # Si solo hay 1 componente
        
        return features, pca.explained_variance_ratio_
        
    except Exception as e:
        st.error(f"Error en PCA: {e}")
        return None, None

def detect_anomalies(df):
    """Detecta anomal√≠as usando Isolation Forest"""
    try:
        # Verificar que hay suficientes datos
        if len(df) < 5:
            st.warning(f"‚ö†Ô∏è Se necesitan al menos 5 registros para detecci√≥n de anomal√≠as, pero solo hay {len(df)}")
            st.info("üí° **Sugerencias:**\n- Selecciona una provincia con m√°s actividad\n- Usa 'Todas' en tipo de contrataci√≥n\n- Prueba con un a√±o con m√°s datos")
            return None
        
        # Preparar datos
        features = df[['total', 'contracts', 'month_order']].copy()
        features = features.fillna(0)
        
        # Verificar que hay variaci√≥n en los datos
        if features.std().sum() == 0:
            st.warning("‚ö†Ô∏è No hay variaci√≥n en los datos para detectar anomal√≠as")
            st.info("üí° Todos los valores son muy similares")
            return None
        
        # Ajustar contaminaci√≥n basada en el tama√±o de los datos
        contamination = min(0.2, max(0.05, 1.0 / len(df)))  # Entre 5% y 20%
        
        # Aplicar Isolation Forest
        iso_forest = IsolationForest(contamination=contamination, random_state=42)
        anomalies = iso_forest.fit_predict(features)
        
        df_anomalies = df.copy()
        df_anomalies['anomaly'] = anomalies
        df_anomalies['is_anomaly'] = df_anomalies['anomaly'] == -1
        
        return df_anomalies
    except Exception as e:
        st.error(f"Error en detecci√≥n de anomal√≠as: {e}")
        return None

def show_prediction_models(df):
    """Muestra la secci√≥n de modelos de predicci√≥n"""
    st.markdown("---")
    st.header("ü§ñ Aplicaci√≥n de Modelos de Predicci√≥n")
    
    # Crear pesta√±as para diferentes modelos
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üéØ Clustering", 
        "üìà Predicci√≥n", 
        "üìä Clasificaci√≥n", 
        "üîç PCA", 
        "‚ö†Ô∏è Anomal√≠as"
    ])
    
    with tab1:
        st.subheader("üéØ Clustering - Agrupar provincias/contratos")
        
        cluster_result = apply_clustering(df)
        if cluster_result is not None:
            st.success("‚úÖ Clustering aplicado exitosamente")
            
            # Mostrar resultados
            fig_cluster = px.scatter(
                cluster_result, 
                x='total_sum', 
                y='contracts_sum',
                color='cluster',
                hover_data=['internal_type'],
                title='Agrupaci√≥n de Tipos de Contrataci√≥n',
                labels={'total_sum': 'Total Montos', 'contracts_sum': 'Total Contratos'}
            )
            st.plotly_chart(fig_cluster, use_container_width=True)
            
            # Mostrar tabla de clusters
            st.write("üìã **Resultados del Clustering:**")
            st.dataframe(cluster_result)
            
            st.info("**Resultado:** Los tipos de contrataci√≥n han sido agrupados en clusters basados en montos y cantidad de contratos.")
        else:
            st.error(f"‚ùå No se pudo aplicar clustering a los datos")
            st.info("üí° **Para que funcione el clustering necesitas:**\n- Datos de al menos 3 tipos de contrataci√≥n diferentes\n- Selecciona 'Todas' en tipo de contrataci√≥n\n- Prueba con provincias m√°s grandes como GUAYAS o PICHINCHA")
    
    with tab2:
        st.subheader("üìà Predicci√≥n de Montos")
        
        predictions = predict_amounts(df)
        if predictions is not None:
            st.success("‚úÖ Predicciones generadas exitosamente")
            
            # Mostrar predicciones
            month_names = {13: 'Enero (Pr√≥ximo)', 14: 'Febrero (Pr√≥ximo)', 15: 'Marzo (Pr√≥ximo)'}
            predictions['month_name'] = predictions['month'].map(month_names)
            
            fig_pred = px.bar(
                predictions,
                x='month_name',
                y='predicted_total',
                title='Predicci√≥n de Montos - Pr√≥ximos 3 Meses',
                labels={'predicted_total': 'Monto Predicho (USD)', 'month_name': 'Mes'}
            )
            st.plotly_chart(fig_pred, use_container_width=True)
            
            # Mostrar tabla de predicciones
            st.write("üìã **Predicciones:**")
            predictions_display = predictions.copy()
            predictions_display['predicted_total'] = predictions_display['predicted_total'].apply(lambda x: f"${x:,.2f}")
            st.dataframe(predictions_display[['month_name', 'predicted_total']])
            
            st.info("**Resultado:** Predicciones basadas en tendencia hist√≥rica de los datos.")
        else:
            st.error("‚ùå No se pudieron generar predicciones")
            st.info("üí° **Para que funcionen las predicciones necesitas:**\n- Datos de al menos 3 meses diferentes\n- Prueba con 'Todas' en tipo de contrataci√≥n\n- Selecciona un a√±o completo con m√°s actividad")
    
    with tab3:
        st.subheader("üìä Clasificaci√≥n de Contratos por Valor")
        
        classified = classify_contracts(df)
        if classified is not None:
            st.success("‚úÖ Clasificaci√≥n completada exitosamente")
            
            # Gr√°fica de clasificaci√≥n
            classification_count = classified['classification'].value_counts().reset_index()
            classification_count.columns = ['classification', 'count']
            
            fig_class = px.pie(
                classification_count,
                names='classification',
                values='count',
                title='Clasificaci√≥n de Contratos por Valor',
                color_discrete_map={'Alto': 'red', 'Medio': 'yellow', 'Bajo': 'green'}
            )
            st.plotly_chart(fig_class, use_container_width=True)
            
            # Estad√≠sticas de clasificaci√≥n
            st.write("üìã **Estad√≠sticas de Clasificaci√≥n:**")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                alto_count = len(classified[classified['classification'] == 'Alto'])
                st.metric("üî¥ Contratos Alto Valor", alto_count)
            
            with col2:
                medio_count = len(classified[classified['classification'] == 'Medio'])
                st.metric("üü° Contratos Valor Medio", medio_count)
            
            with col3:
                bajo_count = len(classified[classified['classification'] == 'Bajo'])
                st.metric("üü¢ Contratos Bajo Valor", bajo_count)
            
            st.info("**Resultado:** Los contratos han sido clasificados en Alto, Medio y Bajo valor basado en percentiles.")
        else:
            st.error("‚ùå No se pudo realizar la clasificaci√≥n")
            st.info("üí° **Para que funcione la clasificaci√≥n necesitas:**\n- Al menos 3 registros de contratos\n- Datos con variaci√≥n en los montos\n- Prueba con filtros m√°s amplios")
    
    with tab4:
        st.subheader("üîç PCA - Visualizar agrupaciones ocultas")
        
        pca_result, variance_ratio = apply_pca(df)
        if pca_result is not None:
            st.success("‚úÖ PCA aplicado exitosamente")
            
            # Gr√°fica PCA
            fig_pca = px.scatter(
                pca_result,
                x='pca1',
                y='pca2',
                hover_data=['internal_type'],
                title='An√°lisis de Componentes Principales (PCA)',
                labels={'pca1': f'PC1 ({variance_ratio[0]:.2%} varianza)', 
                       'pca2': f'PC2 ({variance_ratio[1]:.2%} varianza)'}
            )
            st.plotly_chart(fig_pca, use_container_width=True)
            
            # Informaci√≥n sobre varianza explicada
            st.write("üìä **Varianza Explicada:**")
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("PC1", f"{variance_ratio[0]:.2%}")
            
            with col2:
                st.metric("PC2", f"{variance_ratio[1]:.2%}")
            
            st.info("**Resultado:** PCA reduce la dimensionalidad y muestra patrones ocultos en los datos.")
        else:
            st.error("‚ùå No se pudo aplicar PCA")
            st.info("üí° **Para que funcione PCA necesitas:**\n- Al menos 2 tipos de contrataci√≥n diferentes\n- Datos con suficiente variabilidad\n- Selecciona 'Todas' en tipo de contrataci√≥n")
    
    with tab5:
        st.subheader("‚ö†Ô∏è Detecci√≥n de Anomal√≠as")
        
        anomalies_result = detect_anomalies(df)
        if anomalies_result is not None:
            anomaly_count = len(anomalies_result[anomalies_result['is_anomaly'] == True])
            st.success(f"‚úÖ Detecci√≥n completada: {anomaly_count} anomal√≠as encontradas")
            
            # Gr√°fica de anomal√≠as
            fig_anomaly = px.scatter(
                anomalies_result,
                x='contracts',
                y='total',
                color='is_anomaly',
                title='Detecci√≥n de Contratos Inusuales',
                labels={'contracts': 'Cantidad de Contratos', 'total': 'Monto Total'},
                color_discrete_map={True: 'red', False: 'blue'}
            )
            st.plotly_chart(fig_anomaly, use_container_width=True)
            
            # Mostrar anomal√≠as detectadas
            if anomaly_count > 0:
                st.write("üö® **Contratos An√≥malos Detectados:**")
                anomalous_contracts = anomalies_result[anomalies_result['is_anomaly'] == True]
                st.dataframe(anomalous_contracts[['internal_type', 'total', 'contracts', 'month_name']])
            
            # M√©tricas
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("üö® Anomal√≠as", anomaly_count)
            
            with col2:
                normal_count = len(anomalies_result[anomalies_result['is_anomaly'] == False])
                st.metric("‚úÖ Contratos Normales", normal_count)
            
            st.info("**Resultado:** Se identificaron contratos con patrones inusuales que podr√≠an requerir revisi√≥n.")
        else:
            st.error("‚ùå No se pudo realizar la detecci√≥n de anomal√≠as")
            st.info("üí° **Para que funcione la detecci√≥n de anomal√≠as necesitas:**\n- Al menos 5 registros de contratos\n- Datos con variaci√≥n en montos y cantidades\n- Prueba con filtros m√°s amplios")

# =====================================================
# INTERFAZ DE USUARIO
# =====================================================

# T√≠tulo principal
st.title('üèõÔ∏è An√°lisis de Compras P√∫blicas del Ecuador')
st.markdown("---")

# Sidebar para par√°metros
st.sidebar.header("‚öôÔ∏è Par√°metros de Consulta")

with st.sidebar:
    st.markdown("### üìÖ Filtros de Datos:")
    
    year = st.selectbox(
        'üóìÔ∏è A√±o', 
        [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023],
        index=8,  # Por defecto 2023
        help="Selecciona el a√±o para el an√°lisis"
    )
    
    region = st.multiselect(
        'üèûÔ∏è Provincias', 
        options=PROVINCIAS_ECUADOR,
        default=['GUAYAS'],  # Por defecto GUAYAS
        help="Selecciona una o m√°s provincias para filtrar los datos"
    )
    
    st.markdown("### üìù Selecci√≥n de Tipos de Contrataci√≥n:")
    
    # Opci√≥n para seleccionar todos los tipos
    select_all_types = st.checkbox(
        "üìã Seleccionar todos los tipos de contrataci√≥n", 
        value=False,
        help="Marca esta casilla para incluir todos los tipos de contrataci√≥n"
    )
    
    if select_all_types:
        selected_contract_types = TIPOS_CONTRATACION.copy()
        st.success(f"‚úÖ Seleccionados todos los tipos ({len(TIPOS_CONTRATACION)})")
        # Mostrar algunos tipos como ejemplo
        st.info(f"üî∏ Incluye: {', '.join(TIPOS_CONTRATACION[:3])}... y {len(TIPOS_CONTRATACION)-3} m√°s")
    else:
        # Multiselect para tipos de contrataci√≥n
        selected_contract_types = st.multiselect(
            'üìù Selecciona los Tipos de Contrataci√≥n:', 
            options=TIPOS_CONTRATACION,
            default=['Licitaci√≥n'],  # Por defecto Licitaci√≥n
            help="Puedes seleccionar uno o m√°s tipos. Usa Ctrl+Click para seleccionar m√∫ltiples opciones.",
            key="contract_types_multiselect"
        )
        
        if len(selected_contract_types) == 0:
            st.warning("‚ö†Ô∏è Debes seleccionar al menos un tipo de contrataci√≥n")
        elif len(selected_contract_types) == 1:
            st.info(f"üìã Seleccionado: {selected_contract_types[0]}")
        else:
            st.success(f"‚úÖ Seleccionados {len(selected_contract_types)} tipos:")
            # Mostrar los tipos seleccionados
            for i, tipo in enumerate(selected_contract_types[:5]):  # Mostrar m√°ximo 5
                st.write(f"   üî∏ {tipo}")
            if len(selected_contract_types) > 5:
                st.write(f"   üìã ... y {len(selected_contract_types) - 5} m√°s")
    
    st.markdown("---")
    
    # Bot√≥n para ejecutar consulta
    execute_query = st.button('üîç Ejecutar Consulta', type='primary', use_container_width=True)
    
    # Validar selecci√≥n antes de permitir consulta
    if not select_all_types and len(selected_contract_types) == 0:
        st.error("‚ùå Selecciona al menos un tipo de contrataci√≥n para continuar")

# =====================================================
# √ÅREA PRINCIPAL
# =====================================================

if not execute_query:
    # Mensaje inicial
    st.info("üëà **Instrucciones:**\n1. Selecciona los par√°metros en la barra lateral\n2. Presiona 'üîç Ejecutar Consulta' para ver todas las visualizaciones")
    
    # Mostrar informaci√≥n adicional
    col1, col2 = st.columns(2)
    
    with col1:
        with st.expander("‚ÑπÔ∏è Sobre la aplicaci√≥n"):
            st.markdown("""
            ### üéØ Objetivo
            Analizar datos de compras p√∫blicas del Ecuador mediante visualizaciones interactivas y modelos de predicci√≥n.
            
            ### üìä Caracter√≠sticas
            - Consulta datos de la API oficial (SERCOP)
            - 6 visualizaciones autom√°ticas
            - 5 modelos de Machine Learning
            - Filtros por a√±o, provincia y tipo de contrataci√≥n
            - Descarga de datos en formato CSV
            """)
    
    with col2:
        with st.expander("üìã Funcionalidades"):
            st.markdown("""
            ### üìä Visualizaciones:
            - **Barras**: Total por tipo de contrataci√≥n
            - **L√≠neas**: Evoluci√≥n mensual de montos
            - **Barras Apiladas**: Distribuci√≥n mensual por tipo
            - **Pastel**: Proporci√≥n de contratos
            - **Dispersi√≥n**: Relaci√≥n montos vs contratos
            - **Comparativa**: Tendencias por tipo de contrataci√≥n
            
            ### ü§ñ Modelos de Predicci√≥n:
            - **Clustering**: Agrupaci√≥n autom√°tica
            - **Predicci√≥n**: Montos futuros
            - **Clasificaci√≥n**: Contratos por valor
            - **PCA**: Patrones ocultos
            - **Anomal√≠as**: Detecci√≥n de irregularidades
            """)

else:
    # =====================================================
    # PROCESAMIENTO DE DATOS
    # =====================================================
    
    # Validar que se hayan seleccionado provincias y tipos
    if len(region) == 0:
        st.error("‚ùå Debes seleccionar al menos una provincia para continuar")
        st.stop()
    
    if not select_all_types and len(selected_contract_types) == 0:
        st.error("‚ùå Debes seleccionar al menos un tipo de contrataci√≥n para continuar")
        st.stop()
    
    # Determinar tipos de contrataci√≥n a consultar
    types_to_query = selected_contract_types if not select_all_types else TIPOS_CONTRATACION
    
    # Mostrar informaci√≥n de la consulta
    with st.container():
        st.info(f"üì° Consultando datos para: **{year}** | **{len(region)} provincia(s)** | **{len(types_to_query)} tipo(s) de contrataci√≥n**")
        
        # Realizar consulta combinada
        with st.spinner(f'Obteniendo datos de {len(region)} provincia(s) y {len(types_to_query)} tipo(s)...'):
            combined_data = get_combined_data(year, region, types_to_query)
    
    # =====================================================
    # VISUALIZACIONES
    # =====================================================
    
    if combined_data is not None:
        # Procesar datos combinados
        df = process_data(combined_data)
        
        if df is not None and len(df) > 0:
            # Mostrar resumen de datos
            st.success(f"‚úÖ Datos procesados exitosamente: **{len(df)}** registros")
            
            # M√©tricas principales
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üìä Total Registros", len(df))
            
            with col2:
                st.metric("üí∞ Monto Total", f"${df['total'].sum():,.2f}")
            
            with col3:
                st.metric("üìã Contratos Totales", f"{df['contracts'].sum():,}")
            
            with col4:
                st.metric("üè¢ Tipos de Contrataci√≥n", df['internal_type'].nunique())
            
            # Mostrar distribuci√≥n por provincias y tipos si hay m√∫ltiples
            if len(region) > 1:
                st.markdown("### üó∫Ô∏è Distribuci√≥n por Provincias")
                
                # Gr√°fica de distribuci√≥n por provincias
                province_summary = df.groupby('provincia').agg({
                    'total': 'sum',
                    'contracts': 'sum'
                }).reset_index()
                
                col1, col2 = st.columns(2)
                
                with col1:
                    fig_prov_total = px.bar(
                        province_summary,
                        x='provincia',
                        y='total',
                        title='üí∞ Total de Montos por Provincia',
                        labels={'provincia': 'Provincia', 'total': 'Monto Total (USD)'}
                    )
                    fig_prov_total.update_xaxes(tickangle=45)
                    st.plotly_chart(fig_prov_total, use_container_width=True)
                
                with col2:
                    fig_prov_contracts = px.bar(
                        province_summary,
                        x='provincia',
                        y='contracts',
                        title='üìã Total de Contratos por Provincia',
                        labels={'provincia': 'Provincia', 'contracts': 'Cantidad de Contratos'}
                    )
                    fig_prov_contracts.update_xaxes(tickangle=45)
                    st.plotly_chart(fig_prov_contracts, use_container_width=True)
                
                st.markdown("---")
            
            if len(types_to_query) > 1:
                st.markdown("### üìã Distribuci√≥n por Tipos de Contrataci√≥n")
                
                # Gr√°fica de distribuci√≥n por tipos
                type_summary = df.groupby('tipo_consulta').agg({
                    'total': 'sum',
                    'contracts': 'sum'
                }).reset_index()
                
                col1, col2 = st.columns(2)
                
                with col1:
                    fig_type_total = px.bar(
                        type_summary,
                        x='tipo_consulta',
                        y='total',
                        title='üí∞ Total de Montos por Tipo de Contrataci√≥n',
                        labels={'tipo_consulta': 'Tipo de Contrataci√≥n', 'total': 'Monto Total (USD)'}
                    )
                    fig_type_total.update_xaxes(tickangle=45)
                    st.plotly_chart(fig_type_total, use_container_width=True)
                
                with col2:
                    fig_type_contracts = px.bar(
                        type_summary,
                        x='tipo_consulta',
                        y='contracts',
                        title='üìã Total de Contratos por Tipo',
                        labels={'tipo_consulta': 'Tipo de Contrataci√≥n', 'contracts': 'Cantidad de Contratos'}
                    )
                    fig_type_contracts.update_xaxes(tickangle=45)
                    st.plotly_chart(fig_type_contracts, use_container_width=True)
                
                st.markdown("---")
            
            st.subheader("üìä Visualizaciones")
            
            # Mostrar todas las gr√°ficas
            chart_functions = {
                "üìä Gr√°fica de Barras - Total por Tipo": create_bar_chart,
                "üìà Evoluci√≥n Mensual - L√≠neas": create_line_chart,
                "üìä Barras Apiladas - Mensual por Tipo": create_stacked_bar_chart,
                "ü•ß Gr√°fica de Pastel - Proporci√≥n Contratos": create_pie_chart,
                "üéØ Dispersi√≥n - Total vs Contratos": create_scatter_chart,
                "üìà Comparativa L√≠neas - Tipos por A√±o": create_comparative_line_chart
            }
            
            for chart_title, chart_function in chart_functions.items():
                chart_type = TIPOS_GRAFICAS[chart_title]
                
                # Crear contenedor para cada gr√°fica
                with st.container():
                    st.markdown(f"### {chart_title}")
                    
                    # Crear la gr√°fica
                    fig = chart_function(df)
                    
                    # Mostrar la gr√°fica
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Mostrar descripci√≥n
                    st.info(get_chart_description(chart_type))
                    
                    st.markdown("---")
            
            # Agregar secci√≥n de modelos de predicci√≥n
            show_prediction_models(df)
            
            # Secci√≥n de datos detallados
            with st.expander("üìã Ver Datos Detallados"):
                st.dataframe(df, use_container_width=True)
                
                # Estad√≠sticas adicionales
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üìà Estad√≠sticas B√°sicas")
                    st.write(df[['total', 'contracts']].describe())
                
                with col2:
                    st.markdown("### üè¢ Distribuci√≥n por Tipo")
                    type_summary = df.groupby('internal_type').agg({
                        'total': ['sum', 'mean'],
                        'contracts': ['sum', 'mean']
                    }).round(2)
                    st.write(type_summary)
                
                # Opci√≥n para descargar datos
                csv = df.to_csv(index=False)
                filename = f"compras_publicas_{year}_{region}_{len(types_to_query)}_tipos.csv"
                st.download_button(
                    label="üíæ Descargar datos como CSV",
                    data=csv,
                    file_name=filename,
                    mime="text/csv",
                    use_container_width=True
                )
        else:
            st.warning("‚ö†Ô∏è No se pudieron procesar los datos correctamente.")
    
    else:
        st.warning('‚ö†Ô∏è No se encontraron datos para esta combinaci√≥n de filtros.')
        
        # Sugerencias m√°s espec√≠ficas
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("üí° **Sugerencias para encontrar datos:**\n"
                   f"- Selecciona **m√∫ltiples tipos de contrataci√≥n** o marca 'Todos los tipos'\n"
                   f"- Prueba con **otro a√±o** (2020-2023 suelen tener m√°s datos)\n"
                   f"- Cambia la **provincia** (ej: GUAYAS, PICHINCHA)\n"
                   f"- Los tipos como 'Todas', 'Menor Cuant√≠a' suelen tener m√°s datos")
        
        with col2:
            st.info("üîç **Recomendaciones espec√≠ficas:**\n"
                   f"- **A√±o actual:** {year} - Prueba 2022 o 2023\n"
                   f"- **Provincia actual:** {region}\n"
                   f"- **Tipos actuales:** {len(types_to_query)} seleccionado(s)\n"
                   f"- Combinar m√∫ltiples tipos aumenta las posibilidades de datos")
        
        # Mostrar combinaciones sugeridas
        with st.expander("üìã Combinaciones sugeridas que suelen tener datos"):
            st.markdown("""
            **Combinaciones con alta probabilidad de datos:**
            - **2023 | GUAYAS | M√∫ltiples tipos**
            - **2022 | PICHINCHA | Todos los tipos**  
            - **2021 | GUAYAS | Licitaci√≥n + Menor Cuant√≠a**
            - **2020 | PICHINCHA | Todos los tipos**
            - **2023 | Provincias grandes | Cotizaci√≥n + Licitaci√≥n**
            
            *Seleccionar m√∫ltiples tipos de contrataci√≥n aumenta significativamente las posibilidades de obtener datos*
            """)

# =====================================================
# FOOTER
# =====================================================

st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666666; padding: 20px;'>
        üìä <strong>Aplicaci√≥n de An√°lisis de Compras P√∫blicas con IA</strong><br>
        üèõÔ∏è Datos oficiales del Sistema Nacional de Contrataci√≥n P√∫blica (SERCOP) - Ecuador<br>
        ü§ñ Modelos de Machine Learning integrados para an√°lisis predictivo<br>
        üîó <a href="https://datosabiertos.compraspublicas.gob.ec" target="_blank">Portal de Datos Abiertos</a>
    </div>
    """, 
    unsafe_allow_html=True
)